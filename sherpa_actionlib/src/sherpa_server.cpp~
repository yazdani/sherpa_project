#include <ros/ros.h>
#include <actionlib/server/simple_action_server.h>
#include <sherpa_actionlib/trajAction.h>

class trajAction
{
protected:

  ros::NodeHandle nh_;
  // NodeHandle instance must be created before this line. Otherwise strange error may occur.
  actionlib::SimpleActionServer<sherpa_actionlib::trajAction> as_; 
  std::string action_name_;
  // create messages that are used to published feedback/result
  sherpa_actionlib::trajFeedback feedback_;
  sherpa_actionlib::trajResult result_;
  
public:
  
  trajAction(std::string name) :
    as_(nh_, name, boost::bind(&trajAction::executeCB, this, _1), false),
  action_name_(name)
  {
    as_.start();
  ROS_INFO("HELLO2");
  }
  
  ~trajAction(void)
  {
  }
 
   
  void executeCB(const sherpa_actionlib::trajGoalConstPtr &goal)
  {
    ROS_INFO("HELLO1");
    feedback_.word="Test";
    result_.word=feedback_.word;
    

    // helper variables
     ros::Rate r(1);
     bool success = true;

    
    // feedback_.word = "TEST";
  //feedback_.sequence.push_back(0);
  // feedback_.sequence.push_back(1);
    
    // publish info to the console for the user
     // ROS_INFO("%: Executing, with the feedback %s", action_name_.c_str(), feedback_.word);
  
    // start executing the action
    /*   
 for(int i=0; i<goal->command.size(); i++)
    {
      // check that preempt has not been requested by the client
      if (as_.isPreemptRequested() || !ros::ok())
      {
        ROS_INFO("%s: Preempted", action_name_.c_str());
        // set the action state to preempted
        as_.setPreempted();
        success = false;
        break;
      }
      feedback_.word = "Is still working!";
      // publish the feedback
      as_.publishFeedback(feedback_);
      // this sleep is not necessary, the sequence is computed at 1 Hz for demonstration purposes
      r.sleep();
    }

    if(success)
    {
      result_.word = feedback_.word;
      ROS_INFO("%s: Succeeded", action_name_.c_str());
      // set the action state to succeeded
      as_.setSucceeded(result_);
      }*/
     ROS_INFO("At the End of the method by Server");
   as_.setSucceeded(result_);
}

};


int main(int argc, char** argv)
{
  ros::init(argc, argv, "trajectory");
  trajAction trajectory(ros::this_node::getName());
  ros::spin();
  ROS_INFO("HELLO3");
  return 0;
}
